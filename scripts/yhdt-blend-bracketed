#!/bin/bash

# Сводим брекетинг
 
SELF="`basename $0`"
SELF_PATH=$(cd "`dirname $0`" && pwd)

usage() {
    echo "USAGE: $SELF [-f] <path> <extension>"
    echo -e "Options:"
    echo -e "\t-f Принудительно свести (даже если каталог отмечен, как сведённый)"
    echo "Params:"
    echo -e "\t <path>\tпуть к каталогу с файлами (ex. /home/user/dir1/), not a file name"
    echo -e "\t <extension>\tрасширение файлов в каталоге (ex. TIF)"
}

i=0
_agrs=()
for arg in "$@"; do
    _agrs[$i]="$arg"
    i=$((i + 1))
done

while getopts "f" Option; do
    case $Option in
            f ) FORCE="1";;
            * ) echo "[!] Invalid option" && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

. "$SELF_PATH/functions.sh"

DIR="$1"
EXT="$2"

ENFUSE=`which enfuse`
EXIFTOOL=`which exiftool`

QUIET=0
VERBOSE=1
DRYRUN=N

if [ -z "$ENFUSE" ]; then
    echo "Для работы необходим пакет enblend" && usage && exit 1
fi

if [ -z "$EXIFTOOL" ]; then
    echo "Для работы необходим exiftool" && usage && exit 1
fi

if [ -z "$DIR" ]; then
    echo "Укажите каталог с файлами" && usage && exit 1
fi

if [ -z "$EXT" ]; then
    echo "Укажите расширение файлов" && usage && exit 1
fi

if [ ! -d "$DIR" ]; then
    echo "$DIR не является директорией" && usage && exit 1
fi

DIR=$(cd "$DIR" && pwd) #transform to absolute path
cd "$DIR"

BLEND_DIR="$DIR/blend"
BRACKETED_DIR="$DIR/bracketed"


blendTifFiles() {
    local blend_name
    local new_file
    
    if [ ! -d "$BLEND_DIR" ]; then
        mkdir "$BLEND_DIR"
    fi
    
    blend_name=`basename $1 | sed "s/\..*//g"`
    new_file="$DIR/blend/$blend_name.tif"
    
    echo -n "Enfuse $1 $2 $3 $4 $5 $6 $7 into '$new_file' ... "
    
    $ENFUSE --compression=deflate -o "$new_file"  "$1" "$2" "$3" "$4" "$5" "$6" "$7" > /dev/null 2>&1
    
    if [ $? -eq 0 ]; then
        $EXIFTOOL -overwrite_original -x Orientation -x Compression -tagsFromFile "$1" -EXIF:All --IFD1:All -IPTC:All "${new_file}" > /dev/null 2>&1
    
        echo "OK"
        return $E_NO_ERR
    else
        echo "Failed"
        return $E_UNKNOWN
    fi
}


# function processFileType() takes file extension as a param (case insensitive)
processFileType() {
    local space_status
    local file
    local make
    local make_lower
    local camera
    local camera_lower
    local isbracketed
    local bracket_count=3
    local element_count
    local index
    local images_index
    local bracketed_images_sequence
    local image_number1
    local image_number2
    local image_number3
    local exp_comp1
    local exp_comp2
    local exp_comp3
    local has_errors=0
    
    local extension=$1

    if [ $QUIET = 0 ]; then
        echo "Analyzing $extension files"
    fi
    declare -a bracketed
    declare -a exposures
    
    cd "$DIR"
    for file in `find . -maxdepth 1 -type f -iname "*.$extension" -print | sort`; do # find files with the right extension in specified directory and sort names
        isbracketed="NO"
        read make camera <<<$($EXIFTOOL -n -S -t -EXIF:Make -EXIF:Model "$file")
        
        make_lower=`echo "$make" | awk '{print tolower($0)}'`
        camera_lower=`echo "$camera" | awk '{print tolower($0)}'`
        
        fn_loaded "bracket_mode" || . $SELF_PATH/camera/${make_lower// /_}/${camera_lower// /_}
        
        if [ $VERBOSE = 1 ]; then
            echo -n "Checking if file `basename $file` is bracketed ... "
        fi
        
        read isbracketed exposure <<<$(bracket_mode "$file")
        if [ "$isbracketed" = "YES" ]; then
            bracketed=( "${bracketed[@]}" "$file" )
            exposures=( "${exposures[@]}" "$exposure" )
        fi
        
        if [ $VERBOSE = 1 ]; then
            echo $isbracketed
        fi
    done
    
    element_count=${#bracketed[@]}
    bracket_count=`bracket_count ${bracketed[0]}`
    if [ $VERBOSE = 1 ]; then
        echo "$element_count bracketed images found"
    fi
    index=0 # counter for looping in the array of files
    while [ $index -lt  $(($element_count-$bracket_count+1)) ];do # have to have at least 3 files left
        check_space "$DIR"
        if [ ! $SPACE_STATUS -eq 0 ]; then
            echo "Закончилось место на диске. Выходим."
            return $E_NO_SPACE
        fi
        
        local bracketed_images_numbers=()
        local bracketed_exposures=()
        local bracketed_images_sequence="YES"
        local bracketed_exposures_sequence="YES"
        
        images_index=0
        while [ $images_index -lt $bracket_count ]; do
            bracketed_images_numbers=( "${bracketed_images_numbers[@]}" "`basename ${bracketed[$(($index+$images_index))]} | sed "s/\..*//g" | sed "s/[^0-9]//g"`")
            let "images_index = $images_index + 1"
        done
        
        if [ $VERBOSE = 1 ]; then
            echo -n "Checking if images ${bracketed_images_numbers[@]} go together ... "
        fi
        
        images_index=0
        while [ $images_index -lt $(($bracket_count-1)) ]; do
            if [ ! $((10#${bracketed_images_numbers[$images_index]} + 1)) = $(( 10#${bracketed_images_numbers[$(($images_index+1))]} )) ]; then
                bracketed_images_sequence="NO"
                images_index=$bracket_count
            fi
            let "images_index = $images_index + 1"
        done
        
        if [ $VERBOSE = 1 ]; then
            echo $bracketed_images_sequence
        fi
        
        if [ "$bracketed_images_sequence" = "YES" ]; then
        
            if [ $VERBOSE = 1 ]; then
                echo -n "Checking exposures of images ${bracketed_images_numbers[@]} ... "
            fi
            
            images_index=1
            photos_count=$(( $bracket_count / 2 ))
            
            exp0="${exposures[$index]}"
            while [ $images_index -lt $(($photos_count+1)) ]; do
                exp1="${exposures[$(($index+$images_index))]}"
                exp2="${exposures[$(($index+$bracket_count-$images_index))]}"
                
                if [ ! `echo "($exp0 - $exp1) == ($exp2 - $exp0)" | bc -q` = 1 ]; then
                    bracketed_exposures_sequence="NO"
                fi
                
                let "images_index = $images_index + 1"
            done
            
            if [ $VERBOSE = 1 ]; then
                echo $bracketed_exposures_sequence
            fi
            
            if [ "$bracketed_exposures_sequence" = "YES" ]; then
                if [ "$DRYRUN" = "N" ]; then # if for real
                    images_index=0
                    blend_params=()
                    while [ $images_index -lt $bracket_count ]; do
                        blend_params=( "${blend_params[@]}" "${bracketed[$(($index+$images_index))]}" )
                        let "images_index = $images_index + 1"
                    done
                    blendTifFiles ${blend_params[@]} #blend bracketed
                    if [ ! $? -eq $E_NO_ERR ]; then
                        has_errors=$?
                    fi
                fi
                let "index = $index + $bracket_count"
            else
                let "index = $index + 1"
            fi
        fi
    done
    
    return $has_errors
}

check_space "$DIR"

if [ ! -z "$FORCE" -a -f "$DIR/._blended" ]; then
    rm "$DIR/._blended"
fi

if [ -f "$DIR/._blended" ]; then
    echo "Файлы в каталоге уже сведены. Пропускаем."
elif [ ! $SPACE_STATUS -eq 0 ]; then
    echo "Недостаточно места на диске. Пропускаем каталог"
else
    processFileType "$EXT"
    if [ $? -eq 0 ]; then
        # Только если процесс действительно завершился без ошибок
        touch "$DIR/._blended"
    fi
fi

cd "$WORK_PATH"